#!/usr/bin/python
# This a python matplotlib script for generating plots of P0 Estimator accuracy

import sys
from optparse import OptionParser
import numpy as np
import pyfits
from matplotlib.ticker import *
from pylab import figure,show, setp
from matplotlib import rc

#These lists are used for storing data points from the statistics table
bins = []
I = []
P = []
P25 = []
P75 = []
N = []
mean_Poff = []
sig_Poff = []
model_Poff = []
sig_mode = []
P0_ML = []
P0_16 = []
P0_83 = []
P0_true= []
Percent = []
stackerr = []
modelerr = []
P2 = []
P3 = []
P4 = []
Signoise = []
Pfrac = []
sixSN = []
sixPF = []
hline = []

if __name__ == "__main__":
	rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
	rc('text', usetex=True)
	parser = OptionParser("riceplotter.py [options] infile")
	(options, args) = parser.parse_args()
	table = open(args[0]).readlines()
	secondtable = open(args[1]).readlines();	
	linedict = {}
	for line in secondtable:
		#sixSN.append(float(line.split()[3])/float(line.split()[7]))
		sixSN.append(float(line.split()[14])/float(line.split()[8]))
		sixPF.append(float(line.split()[11])/float(line.split()[14]))
		hline.append(1.0)
	for line in table:
		linedict[float(line.split()[3])] = line
	Ilist = linedict.keys()
	Ilist.sort()
	for Ival in Ilist:
		line = linedict[Ival]
		#Signoise.append(float(line.split()[3])/float(line.split()[7]))
		Signoise.append(float(line.split()[14])/float(line.split()[8]))
		Pfrac.append(float(line.split()[11])/float(line.split()[14]))
	#sixPF = np.array([1.02525, 0.86627, 1.21000, 0.81646, 1.78571, 0.96785, 
	#1.00658, 1.17073, 0.81691, 1.15000, 0.91794, 0.98925])
	#sixSN = np.array([1.21680, 1.65405, 1.08672, 3.02695, 1.01355, 1.40108, 
	#122.09448, 1.11924, 3.21892, 1.14634, 1.50678, 1.33875])
	fig = figure()
	yprops = dict(rotation=90, horizontalalignment='right', size='small',
	verticalalignment='center')
	axprops = dict(yscale='linear', xscale='log')
	ax1 = fig.add_axes([0.15, 0.15, 0.8, 0.8], **axprops)
	ax1.set_xlabel("P/noise")
	ax1.set_ylabel("Pestimator/P0")
	ax1.plot(Signoise, Pfrac, 'ko--', label="200 image model")
	ax1.plot(sixSN, sixPF, 'ro', label="600 image model")
	ax1.plot(Signoise, hline, label="Ideal model")
	#ax1.set_xlim((0,10))
	ax1.legend()
	show()
