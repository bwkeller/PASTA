#!/usr/bin/perl

$pi=4.0*atan2(1,1);
$rad=$pi/180.0;
$norm = 1.0;
$AA = 2.20;
$AB = 0.97;
$A = $AB*$norm;
$B = (1-$AB)*$norm;
$sigma = 0.45;

srand(time()^($$+($$<<15)));

$infile=$ARGV[0]; shift(@ARGV);
if ($ARGV>=0)
  {
      $input_p0=$ARGV[0]; shift(@ARGV);
  }
else
  {
      $input_p0=0.0;
  } 

open(IN,"cat $infile | grep ' a' |");

#for ($i=0; $i<=$N1; $i++)
#{
#
#  for ($j=0; $j<=$N2; $j++)
#  {

while ($line=<IN>)
  {
    chop($line);
    @line=split(/\s+/,$line);
    if ($line[0] eq '') {shift(@line);}

    $peak_I=$line[2];
    #$sigma_QU=$line[10]/1.253;     # Convert mean of PI noise into sigma_QU in mJy/beam
	#INPUT IS IN JY/BEAM
    #$sigma_QU=1000*$line[10];     # Median of the absolute value of Q/U off source per postage stamp.  NOT GAUSSIAN SIGMA!!
    $sigma_QU=$line[10];     # Median of the absolute value of Q/U off source per postage stamp.  NOT GAUSSIAN SIGMA!!

    #$sigma_QU=1.E-2;

    # Uniform distribution: Shows that noise must be Gaussian
    # to get a Rice distribution
    #$Q=rand(2)-1.0;
    #$U=rand(2)-1.0;
   
    # Add a polarised signal to the noise if desired:
    #$p0=0.44;
    #$p0=0.0;

    #$p0=$input_p0;

    #$p0=$input_p0*random_gauss_percent(0.0,0.66666666667);

    # Gaussian p0 with median equal to input_p0
	# This simulates the intrinsic distribution of fractional polarization
	# of the radio source population.
    $p0=$input_p0*abs(randomgauss(0,1.483));
	#print "aaa $p0 $input_p0 \n" ;

    # Gaussian p0 with median equal to input_p0
    # Normalization constants ensure that input_p0 is the median of the distribution
    # Constants determined empirically witha accuracy approximately 0.001
    #$p0=$input_p0*abs(random_gausshermite(1.0,0.15))/0.71436;

    # Uniformly distributed p0:
    #$p0=$input_p0*(1.0+(rand(1)-0.5));
    
    # 0.66
    #$p0=$input_p0*abs(random_nongauss(0,1.0));

    $theta=$pi*rand(1);
    $Q0=$p0*sin(2.0*$theta);
    $U0=$p0*cos(2.0*$theta);

    #$Q=$Q0+random_nongauss(0,$sigma_QU);
    #$U=$U0+random_nongauss(0,$sigma_QU);

    #$Q=$Q0+random_nongauss(0,1.0);
    #$U=$U0+random_nongauss(0,1.0);

    #$Q=$Q0+random_gausshermite_noise($sigma_QU,0.05);
    #$U=$U0+random_gausshermite_noise($sigma_QU,0.05);
    #$Q=$Q0+random_gausshermite_noise($sigma_QU,0.064);
    #$U=$U0+random_gausshermite_noise($sigma_QU,0.064);

	# Nov 6 2009: This is the gaussian+exponential distribution for the QU noise
	# fitted to original NVSS images.
	# 0.276786 is the median of the gaussexp_noise expression when P0 = 0.00
	$Q=($Q0+($sigma_QU/0.276786)*gaussexp_noise($sigma));
	$U=($U0+($sigma_QU/0.276786)*gaussexp_noise($sigma));
	#printf("AAA %15.10f %15.10f\n", $sigma_QU/0.276786, $sigma_QU);
	#printf("AAA %15.10f %15.10f\n", $Q, $U);

    #$Q=$Q0+randomgauss(0,$sigma_QU);
    #$U=$U0+randomgauss(0,$sigma_QU);

    $PI=sqrt($Q*$Q+$U*$U);
	#print "BBB $PI\n";

    printf(" %15.10f  %15.10f   %15.10f   %15.10f \n",$p0,$PI,$Q,$U);
    #printf(" %15.10f  %15.10f \n",$p0,$PI);

    #$X[$j]=$X[$j]+sqrt($Q*$Q+$U*$U);

   }

#  }
#
#
#}

close(IN);

#for ($j=0; $j<=$#X; $j++)
#{
#  print "$X[$j]\n";
#
#}


############################################################################

sub randomgauss{

my ($mean,$sig)=@_;

# Comment out error capture to speed up the program
#if ($sig>0)
#{
 $rA=-0.5/($sig*$sig);
 $sqrtsig=1.0/$sig*sqrt(2*$pi);
#}
#else { die "Error: sigma <= 0\n";}

 
$rxx=0;
$ryy=0;
$rXX=1.E30;

$sig5=5*$sig;
$sig10=10*$sig;

#srand(abs(10000000*sin($$*time())));

# if ($sig>0)
# {
    while ($rXX>1.E29)
    {
      $rxx=rand($sig10)-$sig5;
      $ryy=rand(1);
      if ($ryy<=(exp($rA*$rxx*$rxx)))
      {
        $rXX=$rxx+$mean; 
      }
    }
# }

return($rXX);

} # randomgauss

sub random_nongauss{

my ($mean,$sig)=@_;

# Comment out error capture to speed up the program
#if ($sig>0)
#{
 $A=-0.5/($sig*$sig);
 $sqrtsig=1.0/$sig*sqrt(2*$pi);
#}
#else { die "Error: sigma <= 0\n";}

 
$xx=0;
$yy=0;
$XX=1.E30;

$sig5=5*$sig;
$sig10=10*$sig;
$sig20=20*$sig;

#srand(abs(10000000*sin($$*time())));

$alpha=2.8;

# if ($sig>0)
# {
    while ($XX>1.E29)
    {
      $xx=rand($sig20)-$sig10;
      $yy=rand(1);
      #if ($yy<=(exp($A*$xx*$xx)*(1.0+(($x/$sig)**4))))
      #if ($yy<=(exp(-abs($xx)/$sig)))
      if ($yy<=(1.0/(1.0+(abs($xx/$sig)**$alpha))))
      {
        $XX=$xx+$mean; 
      }
    }
# }

return($XX);

} # random_nongauss



sub percent_pol{
    my ($polmode,$polamp,$polwidth)=@_;

    # polmode:
    #   0:   single percentage of polarization, defined by $polamp (percent)
    #   1:   Uniform, random $polamp (percent) polarized, width $polwidth around $polamp   


    # Commented out some if statements not used in this version

    if ($polmode==0)
    {
      $ppp=$polamp;
    }


#    if ($polmode==1)
#    {
#       $ppp=$polamp-0.5*$polwidth+rand($polwidth);
#
#        # Capture a few cases that should not occur:
#        if ($ppp<0) {$ppp=0; die "Illegal percentage of polarization < 0\n"; }
#        if ($ppp>100) {$ppp=100; die "Illegal percentage of polarization > 100\n";}
#    }

#    if ($polmode==2)
#    {
#       #$ppp=random_compact(2,15);
#       #$ppp=random_compact(9,10);
#
#        $AAA=$polamp-0.5*$polwidth;
#        $BBB=$polamp+0.5*$polwidth;
#
#        $ppp=random_compact($AAA,$BBB);
#
#    }


#    if ($polmode==10)
#    {
#        #die "ERROR: BUGS IN SUBROUTINE random_bimodal\n";
#
#       #$ppp=random_compact(2,15);
#       #$ppp=random_compact(9,10);
#       #$ppp=random_bimodal(0,20,9,10,3);
#       #$ppp=random_bimodal(-1.0,12.0,8.0,9.0,2.0);
#       #$ppp=random_bimodal(-10.0,10.0,8.0,9.0,2.0);
#       $ppp=random_bimodal($AAA1,$BBB1,$AAA2,$BBB2,$norm2);
#    }

    if ($polmode==20)
    {
      $ppp=random_tucci();
    }

#    if ($polmode==21)
#    {
#       $ppp=random_tucci_mod();
#    }

    if ($polmode==30)
    {
      $ppp=random_gauss_percent($polamp,$polwidth);
    }

    if ($polmode==31)
    {
        $ppp=random_gausshermite($polamp,$polwidth);
    }

    if ($polmode==40)
    {
        $ppp=random_beck_gaensler();
    }

    
    if ($polmode==50)
    {
        $FFF_percent=1/(($F1/$S0)**$alpha_merge+1.0);
        $yy_percent=rand(1.0);
        if ($yy_percent<$FFF_percent)
         {
          # Draw from the Gauss-Hermite distribution
          # Probability = 1 for $F1 << $S0 depending on $alpha_merge
          $ppp=random_gausshermite($polamp,$polwidth);
          #print "GH: $F1  $ppp $S0  $alpha_merge\n";
         }
        else
         {
          # Draw from the Beck & Gaensler distribution
          # Probability = 1 for $F1 >> $S0 depending on $alpha_merge
          $ppp=random_beck_gaensler();
          #print "Beck: $F1  $ppp $S0  $alpha_merge\n";
         }
    }

    $ppp=$ppp/100.0;
    return($ppp);

}


sub random_compact{
# Simulates a %pol distribution that is smooth, but 0 outside finite interval

my ($AAA,$BBB)=@_;

 
$xx=0;
$yy=0;
$XX=1.E30;

# Make sure that $AAA<$BBB
if ($AAA==$BBB) { die "Error: A=$AAA equal to B=$BBB in random_compact\n";}
if ($AAA>$BBB)
{
    $AAA_tmp=$AAA;
    $AAA=$BBB;
    $BBB=$AAA_tmp;
}
#srand(abs(10000000*sin($$*time())));

while ($XX>1.E29)
    {
      $xx=$AAA+($BBB-$AAA)*rand(1.0);
      $yy=rand(1);

      #$FFF=exp(-1.0/(($xx-$AAA)**2)-1.0/(($xx-$BBB)**2));
      $middle=0.5*($AAA+$BBB);
      $Fnorm=exp(-1.0/(($middle-$AAA)**2)-1.0/(($middle-$BBB)**2));
      $FFF=exp(-1.0/(($xx-$AAA)**2)-1.0/(($xx-$BBB)**2))/$Fnorm;
      #print "$xx $AAA $BBB $FFF \n";
      if ($yy<=$FFF)
      {
        $XX=$xx;
      }
    }


return($XX);

} # random_compact



sub random_bimodal{

my ($AAA1,$BBB1,$AAA2,$BBB2,$norm2)=@_;

 
$xx=0;
$yy=0;
$XX=1.E30;

# Make sure that $AAA<$BBB
if ($AAA1==$BBB1) { die "Error: A=$AAA equal to B=$BBB in random_bimodal\n";}
if ($AAA1>$BBB1)
{
    $AAA1_tmp=$AAA1;
    $AAA1=$BBB1;
    $BBB1=$AAA1_tmp;
}

if ($AAA2==$BBB2) { die "Error: A=$AAA equal to B=$BBB in random_bimodal\n";}
if ($AAA2>$BBB2)
{
    $AAA2_tmp=$AAA2;
    $AAA2=$BBB2;
    $BBB2=$AAA2_tmp;
}

# Set range to draw $xx (total range of binomial distribution):
if ($AAA1<$AAA2)
  {  $AAA=$AAA1; }
else
  {  $AAA=$AAA2; }

if ($BBB2>$BBB1)
  {  $BBB=$BBB2; }
else
  {  $BBB=$BBB1; }

$middle1=0.5*($AAA1+$BBB1);
$Fnorm1=exp(-1.0/(($middle1-$AAA1)**2)-1.0/(($middle1-$BBB1)**2));
$middle2=0.5*($AAA2+$BBB2);
$Fnorm2=exp(-1.0/(($middle2-$AAA2)**2)-1.0/(($middle2-$BBB2)**2));


$FFF_max=0.0;
$xx=$AAA+0.01*($BBB-$AAA);

while ($xx<$BBB)
{
  if (($xx>$AAA1)&&($xx<$BBB1))
    {
      $FFF1=exp(-1.0/(($xx-$AAA1)**2)-1.0/(($xx-$BBB1)**2))/$Fnorm1;
    }
  else
    {
        $FFF1=0.0;
    }

  if (($xx>$AAA2)&&($xx<$BBB2))
    {
       $FFF2=exp(-1.0/(($xx-$AAA2)**2)-1.0/(($xx-$BBB2)**2))/$Fnorm2;
    }
  else
    {
        $FFF2=0.0;
    }

    $FFF=$FFF1+$norm2*$FFF2;

    # Make sure that only percentages between 0 and 100 can occur:
    if (($xx<0)||($xx>100)) {$FFF=0;}

      if ($FFF>$FFF_max) {$FFF_max=$FFF;}

      #print "FFF: $xx  $FFF1 :: $FFF2 :: $FFF \n";
      $xx=$xx+(0.001*($BBB-$AAA));
}


while ($XX>1.E29)
  {
    $xx=$AAA+($BBB-$AAA)*rand(1.0);
    $yy=rand(1);

    #$middle1=0.5*($AAA1+$BBB1);
    #$Fnorm1=exp(-1.0/(($middle1-$AAA1)**2)-1.0/(($middle1-$BBB1)**2));

    if (($xx>$AAA1)&&($xx<$BBB1))
     {
      $FFF1=exp(-1.0/(($xx-$AAA1)**2)-1.0/(($xx-$BBB1)**2))/$Fnorm1;
     }
    else
     {
        $FFF1=0.0;
     }

      #$middle2=0.5*($AAA2+$BBB2);
      #$Fnorm2=exp(-1.0/(($middle2-$AAA2)**2)-1.0/(($middle2-$BBB2)**2));

   if (($xx>$AAA2)&&($xx<$BBB2))
    {
      $FFF2=exp(-1.0/(($xx-$AAA2)**2)-1.0/(($xx-$BBB2)**2))/$Fnorm2;
    }
   else
    {
      $FFF2=0.0;
    }

    $FFF=($FFF1+$norm2*$FFF2)/$FFF_max;
    # Make sure that only percentages between 0 and 100 can occur:
    if (($xx<0)||($xx>100)) {$FFF=0;}

      #print "$xx $AAA $BBB $FFF \n";
      if ($yy<=$FFF)
      {
        $XX=$xx;

      }
    }


return($XX);

} # random_bimodal



sub random_tucci{

my ($mean,$sig)=@_;

# Draw percentage of polarization from the distribution given by Tucci et al. (2004)
# MNRAS 349, 1267. Use only the first term, in their Equation (2), neglecting
# the nearly unpolarized sources with PI/I < 0.1%. Maximum allowed percentage
# of polarization is 15% (following range plotted by Tucci et al.). 
# Normalized Tucci's first term to 1 at 0 polarization
# for practical purpose of drawing variable $yy from the range 0 ... 1.
 
$xx=0;
$yy=0;
$XX=1.E30;

#srand(abs(10000000*sin($$*time())));

  while ($XX>1.E29)
    {
      # $xx=rand(30.0);
      $xx=rand(20.0);

      $FFF=2.7/(2.7+0.025*($xx**3.7));
 
      $yy=rand(1);
      if ($yy<=$FFF)
      {
        $XX=$xx;
 
      }
    }

return($XX);

} # random_tucci




sub random_tucci_mod{

    my ($mean,$sig)=@_;

# Draw percentage of polarization from the distribution given by Tucci et al. (2004)
# MNRAS 349, 1267. Use only the first term, in their Equation (2), neglecting
# the nearly unpolarized sources with PI/I < 0.1%. Maximum allowed percentage
# of polarization is 15% (following range plotted by Tucci et al.).
# Normalized Tucci's first term to 1 at 0 polarization
# for practical purpose of drawing variable $yy from the range 0 ... 1.

    $xx=0;
    $yy=0;
    $XX=1.E30;

#srand(abs(10000000*sin($$*time())));

  while ($XX>1.E29)
  {
      $xx=rand(30.0);

      # Original Tucci distribution
      # $FFF=2.7/(2.7+0.025*($xx**3.7));

      die "Warning! Used polmode=21 without checking!\n";
      $FFF=2.7/(2.7+0.025*($xx**3.0));      

      $yy=rand(1);
      if ($yy<=$FFF)
      {
          $XX=$xx;

      }
  }

    return($XX);

} # random_tucci_mod



sub random_gauss_percent{

# Draw positive number < 100 from Gaussian distribution
# optimized for drawing percentage polarization efficiently

my ($mean,$sig)=@_;

#if ($sig>0)
#{
    $A=-0.5/($sig*$sig);
    $sqrtsig=1.0/$sig*sqrt(2*$pi);
#}
#else { die "Error: sigma <= 0\n";}

 
$xx=0;
$yy=0;
$XX=1.E30;

$sig5=5*$sig;
$sig10=10*$sig;


if ($sig5>100) 
  { $max_xx=100; }
else
  { $max_xx=$sig5; }

# if ($sig>0)
#{
    while ($XX>1.E29)
    {
        $xx=rand($max_xx);
        $yy=rand(1);

      if ($yy<=(exp($A*$xx*$xx)))
      {
          $XX=$xx;
 
      }
    }
#}

print "QQQ1: $mean $sig $XX  \n";

return($XX);


} # random_gauss_percent



sub random_gausshermite_noise{

my ($gauss_sig,$h4)=@_;


$xx=0;
$yy=0;
$XX=1.E30;

$sqrt24=sqrt(24.0);
$Fnorm=1.0+$h4*3.0/$sqrt24;

# Cut off at 5.5 sigma level. Found 5 sigma level slightly to small.
# Set cut-off level as small as possible to increase speed.

$max_xx_pol=5.5*$gauss_sig;
if ($max_xx_pol>100) {$max_xx_pol=100;}


while ($XX>1.E29)
{
    $xx=rand(2.0*$max_xx_pol)-$max_xx_pol;
    $yy=rand(1);

    $xx=$xx/$gauss_sig;
    $xxsq=$xx*$xx;

    #print "QQQ: $gauss_sig $h4  :: $xx $yy\n";

    #$H4=(4*($xx**4)-12*$xx*$xx+3.0)/$sqrt24;
    $H4=(4*($xxsq*$xxsq)-12*$xxsq+3.0)/$sqrt24;

    $FFF=exp(-0.5*$xxsq)*(1.0+$h4*$H4)/$Fnorm;

    if ($yy<=$FFF)
      {
          $XX=$xx*$gauss_sig;
      }
}

#print "QQQ1: $XX\n";

return($XX);

} # random_gausshermite_noise





sub random_gausshermite{

my ($gauss_sig,$h4)=@_;


$xx=0;
$yy=0;
$XX=1.E30;

$sqrt24=sqrt(24.0);
$Fnorm=1.0+$h4*3.0/$sqrt24;

# Cut off at 5.5 sigma level. Found 5 sigma level slightly to small.
# Set cut-off level as small as possible to increase speed.

$max_xx_pol=5.5*$gauss_sig;
if ($max_xx_pol>100) {$max_xx_pol=100;}


while ($XX>1.E29)
{
    $xx=rand($max_xx_pol);
    $yy=rand(1);

    $xx=$xx/$gauss_sig;
    $xxsq=$xx*$xx;

    #print "QQQ: $gauss_sig $h4  :: $xx $yy\n";

    #$H4=(4*($xx**4)-12*$xx*$xx+3.0)/$sqrt24;
    $H4=(4*($xxsq*$xxsq)-12*$xxsq+3.0)/$sqrt24;

    $FFF=exp(-0.5*$xxsq)*(1.0+$h4*$H4)/$Fnorm;

    if ($yy<=$FFF)
      {
          $XX=$xx*$gauss_sig;
      }
}


return($XX);

} # random_gausshermite




sub random_beck_gaensler{


$xx=0;
$yy=0;
$XX=1.E30;

$bg_centre=-1.5;

  while ($XX>1.E29)
    {
      # $xx=rand(30.0);
      $xx=0.70*rand(1);
 
      $lxx=log($xx)/log(10.0);

      $width=0.0; 
      $amp=0.0;
      if ($lxx<-2.0)
       {
        $width=0.700;
        $amp=0.690;
       }
      else
       {
        if ($lxx<-1.5)
         {
           $width=0.550;
           $amp=0.808;
         }
        else
         {
          $width=0.353;
          $amp=0.808;         
         }

       }

      $FFF=$amp*exp(-0.5*($lxx-$bg_centre)*($lxx-$bg_centre)/($width*$width))/($xx*log(10.0));
 
      $FFF=$FFF/34.734940;

      $yy=rand(1);
      if ($yy<=$FFF)
      {
        $XX=100*$xx;
        
      }
    }

return($XX);



}


sub gaussexp_noise{

my ($gauss_sig)=@_;

$xx=0;
$yy=0;
$XX=1.E30;

# Cut off at 12 sigma level. 
$max_xx_pol=12*$gauss_sig;
if ($max_xx_pol>100) {$max_xx_pol=100;}

while ($XX>1.E29)
{
    $xx=rand(2.0*$max_xx_pol)-$max_xx_pol;
    $yy=rand(1);
    #xx is x in the function
    $xx1=$xx;
    $xx=$xx/$gauss_sig;
    $xxsq=$xx*$xx;
    #Gaussian+Exp function used, normalised.
    $FFF=($A/(sqrt(2*$pi)*$gauss_sig))*exp(-0.5*$xxsq)+$B*exp(-1.*$AA*abs($xx1));

    if ($yy<=$FFF)
      {
          $XX=$xx*$gauss_sig;
      }
}

return($XX);

} # gaussexp_noise

